<!DOCTYPE html>
<html>

<head>
    <title>Mobile-Power-Unit</title>
    <!--<script src="jquery.js"></script>-->
    <script src="events.js"></script>
    <script src="Chartmin.js"></script>
    <script src="utils.js"></script>
    <link href="Styles.css" rel="stylesheet">
    <meta charset="utf-8">
</head>

<body>
    <header>
        <div class="row">
            <div class="column">
                <div class="title">Mobile-Power-Unit</div>
            </div>
            <div class="column">
                <a href="https://www.conductix.com/en">
                    <img src="CXS_Logo.png" alt="CXS logo" class="logo">
                </a>
            </div>
        </div>
    </header>

    <div class="content">
        <div id="navbar" class="navigation">
            <div class="btn-group">
                <a href="index.htm"><button id="Index">Monitor</button></a>
                <a href="Settings.htm"><button id="Config">Settings</button></a>
                <button id="Debug" class="active-tab">Debug</button>
            </div>
        </div>
        <div class="row-layout">
            <div class="column-layout">
                <div id="embos">
                </div>
                <h2>Chart & Data</h2>
                <h3>AJAX httpRequest data:</h3> 
                <div id="ajax-values">
                </div> 
                <span id="CompanyName"></span>
                <div style="width:100%;">
                    <canvas id="cvs"></canvas>
                </div>
                <div id="Shares" class="shares"></div>
            </div>

            <div class="column-layout">
                <div id="hw">
                </div>
                <div style="width:100%;">
                    <canvas id="canvas"></canvas>
                </div>
                <div style="width:100%;">
                    <canvas id="canvas_2"></canvas>
                </div>
                <br>
                <br>
            </div>

            <div class="column-layout">
                <div id="misc">
                    <div id="set-clear-leds">
                        <h2>Set/Clear LEDs</h2>
                        <form id="debug-form" action="" method="POST">
                          <input <!--#exec cgi="LED0"--> type="checkbox" name="LED0">LED0 &nbsp; 
                          <input <!--#exec cgi="LED1"--> type="checkbox" name="LED1">LED1 &nbsp; 
                          <input <!--#exec cgi="LED2"--> type="checkbox" name="LED2">LED2 &nbsp; 
                          <input <!--#exec cgi="LED3"--> type="checkbox" name="LED3">LED3 &nbsp; 
                          <input <!--#exec cgi="LED4"--> type="checkbox" name="LED4">LED4 &nbsp; 
                          <input <!--#exec cgi="LED5"--> type="checkbox" name="LED5">LED5 &nbsp; 
                          <input <!--#exec cgi="LED6"--> type="checkbox" name="LED6">LED6 &nbsp; 
                          <input <!--#exec cgi="LED7"--> type="checkbox" name="LED7">LED7 &nbsp;
                          <p></p> 
                          <input class="submit-button" type="submit" value="Change" name = "SetLEDs">
                        </form>
                    </div>
                    <div id="change-value">
                        <h2>Change value</h2>
                        <form id="debug-form" action="" method="POST">
                            The current value is <!--#exec cgi="Percentage"-->.<p>
                            Change value: <input name="Percentage" type="text" size="4" maxlength="4" value="<!--#exec cgi="Percentage"-->">
                            <p></p>
                            <input class="submit-button" type="submit" value="Change">
                          </form> 
                    </div>

                    <div class="slidecontainer">
                        <input type="range" min="1" max="100" value="50" class="slider" id="myRange">
                        <p>Value: <span id="demo"></span></p>
                    </div>

                    <div class="tooltip">Info: 
                        <span id="i">&#8505;</span>
                        <span class="tooltiptext">Tooltip text</span>
                    </div>

                    <p>
                        <div class="information">
                            <span id="i"> &#8505;</span>
                        </div>
                        <div class="hidden-info">I am shown when someone hovers over the div above.</div>
                    </p>

                    <p>
                        <div class="information">
                            <span id="i"> &nbsp; &#8505; &nbsp;</span>
                        </div>
                        <div class="hidden-info">I am shown when someone hovers over the div above.</div>
                    </p>

                    <p>
                        <div class="information">
                            <span id="i"> &#8505; :</span>
                        </div>
                        <div class="hidden-info">I am shown when someone hovers over the div above.</div>
                    </p>

                    <p></p>

                    <div>  
                        <dialog id="myFirstDialog" style="width:50%;background-color:#F4FFEF;border:1px dotted black;">  
                        <p><q>I am so clever that sometimes I don't understand a single word of what I am saying.   
                        </q> - <cite>Oscar Wilde</cite></p>  
                        <button id="hide">Close</button>  
                        </dialog>  
                        <button id="show">Show Dialog</button>  
                    </div>
                    
                    <div class="info">
                        <span id="info">&nbsp;&#8505;</span>   
                    </div>

                    <div class="info-2">
                        <span id="info-2">&#9432;</span>   
                    </div>

                    <div class="info-3">
                        <span id="info-3">&#x1F6C8;</span>   
                    </div>

                    
                    <div class="warning">
                        <span id="w">&#9888;</span>   
                    </div>

                    <div class="error">
                        <span id="x-1">&#x2716;</span>
                    </div>
                    <div class="error">
                        <span id="x">&#x2715;</span>
                    </div>
<!-- AJAX SEND REQUEST TO SERVER TEST -->                    
                    <div>
                        <h3>AJAX send request to server</h3>
                        Response: 
                        <div id="response">--</div>
                    </div>
                    <div>
                        <form name="" id="request-form" action="" enctype="multipart/form-data" method="post" onsubmit="return false"> <!--method="POST" onsubmit="return offset_validation()"-->
                            <p>
                                <span class="calib-form-text">Text to be sent to server : </span>
                                <input name="upload" type="text" size="10" maxlength="5" value="0">
                                <input name="xxx" value="Post" class="submit-button_right" type="button" onclick="myfunction();" />
                                <!--
                                    <button class="submit-button_right" onclick="myfunction()">Submit</button>
                                    <input class="submit-button_right" type="button" value="Submit" onclick="myfunction()">
                                -->
                            </p>
                        </form>
                        <script>
                            function myfunction(){
                                var xhr_ajax = new XMLHttpRequest();
                                var data = document.getElementById("request-form").elements;
                                var formData = new FormData(data['upload']);
                                xhr_ajax.open("post", "/Upload.cgi", true);
                                xhr_ajax.setRequestHeader('Content-type', 'application/json; charset=utf-8');
                                xhr_ajax.send(formData);
                                console.log(formData);
                            }
                        </script>
                    </div>
                     
                </div>
            </div>
        </div>
        <!-- JavaScript to provide the "Show/Close" functionality -->  
        <script type="text/JavaScript">  
            (function() {    
                var dialog = document.getElementById('myFirstDialog');    
                document.getElementById('show').onclick = function() {    
                    dialog.show();    
                };    
                document.getElementById('hide').onclick = function() {    
                    dialog.close();    
                };    
            })();   
        </script>
        <!-- JavaScript keep scroll position after refresh -->
        <script>
            document.addEventListener("DOMContentLoaded", function(event) { 
                var scrollpos = localStorage.getItem('scrollpos');
                if (scrollpos) window.scrollTo(0, scrollpos);
            });
    
            window.onbeforeunload = function(e) {
                localStorage.setItem('scrollpos', window.scrollY);
            };
        </script>
        <script>
            if (typeof (EventSource) !== "undefined") {
                var source = new EventSource("SSEembOS.cgi");
                source.onmessage = function (event) {
                    document.getElementById("embos").innerHTML = event.data;
                };
            } else {
                document.getElementById("embos").innerHTML =
                    "Sorry, your browser does not support Server-Sent Events (SSE)...";
            }
            if (typeof (EventSource) !== "undefined") {
                var source = new EventSource("SSELeds.cgi");
                source.onmessage = function (event) {
                    document.getElementById("hw").innerHTML = event.data;
                };
            } else {
                document.getElementById("hw").innerHTML =
                    "Sorry, your browser does not support Server-Sent Events (SSE)...";
            }

            // Slider 
            var slider = document.getElementById("myRange");
            var output = document.getElementById("demo");
            output.innerHTML = slider.value;

            slider.oninput = function() {
                output.innerHTML = this.value;
            }

            // Sticky Navigation Bar
            window.onscroll = function() {myFunction()};

            var navbar = document.getElementById("navbar");
            var sticky = navbar.offsetTop;

            function myFunction() {
                if (window.pageYOffset >= sticky) {
                    navbar.classList.add("sticky")
                } else {
                    navbar.classList.remove("sticky");
                }
            }






            //
            // Global variable.
            //
            var TLineChart;
            var SharesLineChart;
            var config;
            var _URL;
            var _CompanyNames = new Array ( 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                                            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
                                        );

            //
            // Helper function.
            //
            function _GetMaxOfArray(Array) {
                var Max;
                var i;

                Max = 0;
                for (i = 0; i < Array.length; i++) {
                    if (Array[i] > Max) {
                        Max = Array[i];
                    }
                }
            return Max;
            }

            //
            // This is the AJAX callback. This function creates the chart, after the AJAX function
            // receives the data.
            //
        function _Callback(data) {
            var Max;
            Max = _GetMaxOfArray(data);
            Max = (Max + 20) -  (Max % 10);

            document.getElementById("ajax-values").innerHTML = data;

            if (typeof (SharesLineChart) !== "undefined") {

                SharesLineChart.data.datasets[0].data = data;

                console.log(SharesLineChart.data.datasets[0].data);
                //console.log(TLineChart.data.datasets[0].data);
                //console.log(TLineChart.data.datasets[1].data);

                //var _times = new Date();
                //SharesLineChart.data.labels.push(_times);
                //if (SharesLineChart.data.labels.length > 30) {
                    
                    //SharesLineChart.data.labels.shift();
                //}

                //SharesLineChart.data.datasets.forEach((dataset) => {
                    //dataset.data.pop();
                //});

                //SharesLineChart.data.labels.push(label);
                //SharesLineChart.data.datasets.forEach((dataset) => {
                    //dataset.data.push(data);
                //});

                SharesLineChart.update();
                //window.myLine = SharesLineChart;            
            }


            //
            // Start by resetting the canvas.
            //
            //RGraph.reset(document.getElementById('cvs'));
            
            //
            // Create the chart
            //
/*
            var myChart = new RGraph.Line('cvs', data)
                .set('ymax', Max )
                .set('numxticks', data.length)
                .set('numyticks', Max)
                .set('background.grid.autofit.numvlines', data.length)
                .set('labels', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',  ])
                .set('colors', ['red'])
                .draw();
                //          document.getElementById("Debug").innerHTML = "CSV: " + data + "<br>";
*/
        }

        //
        // Draw the graph with the stock prices of the selected company.
        //
        function DrawGraph() {
            var i;
            if (_URL.length !== 21) {
                i = _URL.charAt(21) + _URL.charAt(22);
            } else {
                i = _URL.charAt(21);
            }
            document.getElementById("CompanyName").innerHTML = "<h3>Company " + _CompanyNames[i] + "</h3>";

            if (window.XMLHttpRequest) {
                var httpRequest = new XMLHttpRequest();
            } else if (window.ActiveXObject) {
                //var httpRequest = new ActiveXObject("Microsoft.XMLHTTP");
                try {
                    var httpRequest = new ActiveXObject("Msxml2.XMLHTTP");
                } catch (otherMS) {
                    try {
                        var httpRequest = new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (failed) {
                        var httpRequest = null;
                    }
                }
            }
            httpRequest.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    this.__user_callback__ = _Callback;
                    this.__user_callback__(this.responseText.split(',').map(Number));
                    //document.getElementById("ajax-values").innerHTML = this.responseText;
                    //var json = JSON.parse(this.response);
                    console.log(this.responseText);
                    console.log(this.response.split(',').map(Number));
                }
            }
            httpRequest.open('GET', _URL, true);
            httpRequest.send();
        }

        //
        // Get the details of the selected company.
        //
        function GetDetails(CompanyID) {
            _URL = "/GetData.cgi?Company=" + CompanyID;
            DrawGraph();
        }
        //
        // Draw share table
        //
        if(typeof(EventSource) !== "undefined") {
            var source = new EventSource("GetShareTable.cgi");
            source.onmessage = function(event) {
                if (_URL == undefined) {
                    _URL = "/GetData.cgi?Company=0";
                }
                DrawGraph();
                document.getElementById("Shares").innerHTML = event.data + "<br>";
            };
        } else {
            document.getElementById("Shares").innerHTML = "Sorry, your browser does not support server-sent events...";
        }

       		function newDate(days) {
			return moment().add(days, 'd').toDate();
		}

		function newDateString(days) {
			return moment().add(days, 'd').format();
		}         

        var HeatSinkTemp =  [
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor()
        ];

        var CoilTemp = [
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor()
        ];

        
        // Shares Datasets
        var SharesLineChartData = {
            labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',  ],
            datasets: [{
                label: 'Shares',
                borderColor: window.chartColors.red,
                backgroundColor: window.chartColors.red,
                fill: false,
                data: [],
                yAxisID: 'y-axis-1',
            }]
        };

        // General Chart configuration
        var SharesLineChartConfig = {
            data: SharesLineChartData,
            options: {
                responsive: true,
                hoverMode: 'index',
                stacked: false,

                title: {
                    display: true,
                    text: 'Chart.js Line Chart - Shares example'
                },

                tooltips: {
                    //mode: 'index',

                    intersect: false,
                    cornerRadius: 2,
                    backgroundColor: 'rgba(233, 91, 16, 0.85)', //'#E95B10', 
                    borderColor: 'rgba(233, 91, 16, 0.85)', //'#E95B10',
                    borderWidth: 0,
                    titleFontColor: 'white', 
                    titleFontStyle: 'normal',
                    bodyFontColor: 'white',
                    //bodyFontSize: 12,
                    //caretSize: 5,
                    caretPadding: 0,
                    multiKeyBackground: 'white',
                    //footerSpacing: 2,
                    //footerMarginTop: 6,
                    //rtl: true,
                },

                hover: {
                    //mode: 'index',
                    //intersect: false,
                },

                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Time'
                        },
                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }],
                    /*
                    xAxes: [{
                        type: 'time',
                        time: {
                            unit: 'second',
                            displayFormats: {
                                second: 'HH:mm:ss'
                            }
                        },
                        display: true,
                        scaleLabel: {
                            display: false,
                            labelString: 'Time'
                        },
                        ticks: {
                            maxTicksLimit: 10,
                            major: {
                                fontStyle: 'bold',
                                fontColor: '#FF0000'
                            },
                        },

                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }],
                    */
                    yAxes: [{
                        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Value'
                        },
                        position: 'left',
                        id: 'y-axis-1',
                        ticks: {
							suggestedMin: -10,
							suggestedMax: 100,
						}
                    }],
                }
            }
        }

        // Temperature Datasets
        var TLineChartData = {
            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
            datasets: [{
                label: 'Heat Sink Temp',
                borderColor: window.chartColors.red,
                backgroundColor: window.chartColors.red,
                fill: false,
                data: HeatSinkTemp,
                yAxisID: 'y-axis-1',
            }, {
                label: 'Coil Temp',
                borderColor: '#E95B10', //window.chartColors.blue,
                backgroundColor: '#E95B10', //window.chartColors.blue,
                fill: false,
                data: CoilTemp,
                yAxisID: 'y-axis-2'
            }]
        };

        // General Chart configuration
        var TLineChartConfig = {
            data: TLineChartData,
            options: {
                responsive: true,
                hoverMode: 'index',
                stacked: false,

                title: {
                    display: true,
                    text: 'MPU Coil & Heat Sink Temperature'
                },

                tooltips: {
                    //mode: 'index',

                    intersect: false,
                    cornerRadius: 2,
                    backgroundColor: 'rgba(233, 91, 16, 0.85)', //'#E95B10', 
                    borderColor: 'rgba(233, 91, 16, 0.85)', //'#E95B10',
                    borderWidth: 0,
                    titleFontColor: 'white', 
                    titleFontStyle: 'normal',
                    bodyFontColor: 'white',
                    //bodyFontSize: 12,
                    //caretSize: 5,
                    caretPadding: 0,
                    multiKeyBackground: 'white',
                    //footerSpacing: 2,
                    //footerMarginTop: 6,
                    //rtl: true,
                },

                hover: {
                    //mode: 'index',
                    //intersect: false,
                },

                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Time'
                        },
                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }],

                    yAxes: [{
                        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'HS Temperature'
                        },
                        position: 'left',
                        id: 'y-axis-1',
                        ticks: {
							suggestedMin: -10,
							suggestedMax: 100,
						},
                    }, {
                        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Coil Temperature'
                        },
                        position: 'right',
                        id: 'y-axis-2',
                        ticks: {
							suggestedMin: -10,
							suggestedMax: 100,
						},

                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }],
                }
            }
        }

        var date_format = 'h:mm:ss.SSS a';

        var Config = {
            type: 'line',
            data: {
                datasets: []
            },

            options: {
                responsive: true,
                maintainAspectRatio: true,
                title: {
                    display: true,
                    text: 'title'
                },

                tooltips: {
                    position: "average",
                    mode: 'index',
                    intersect: false,
                    callbacks: {
                        title: function(tooltipItem, data) {return moment(tooltipItem[0].xLabel).format(date_format);},
                        label: function(tooltipItem, data) {
                            let label = config.data.datasets[tooltipItem.datasetIndex].label;
                            let value = tooltipItem.yLabel;
                            config.options.scales.yAxes.forEach(function (element, index) {
                                if (element.id == config.data.datasets[tooltipItem.datasetIndex].yAxisID)
                                {
                                    value = element.ticks.callback(value, tooltipItem.index, data.datasets[tooltipItem.datasetIndex].data);
                                    return label + ': ' + value;
                                }
                                });
                            return label + ': ' + value;
                        },
                    }  
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        time: {
                            unit: 'second',
                            displayFormats: {
                                second: 'HH:mm:ss'
                            }
                        },
                        display: true,
                        scaleLabel: {
                            display: false,
                            labelString: 'Date'
                        },
                        ticks: {
                            maxTicksLimit: 10,
                            major: {
                                fontStyle: 'bold',
                                fontColor: '#FF0000'
                            },
                        }
                    }],
        
                    yAxes: [],
                }
            }
        }

        window.onload = function() {

            var cvs = document.getElementById('cvs').getContext('2d');
            SharesLineChart = new Chart.Line(cvs, SharesLineChartConfig);
            window.myLine = SharesLineChart;

            var ctx_2 = document.getElementById('canvas_2').getContext('2d');
            window.myLine = new Chart.Line(ctx_2, Config);

            var ctx = document.getElementById('canvas').getContext('2d');
            TLineChart = new Chart.Line(ctx, TLineChartConfig);
            window.myLine = TLineChart;
        };

        </script>
    </div>

    <footer>
        <!--<p><a href="index.htm">Back to main</a></p>-->
        <!--
            <p>LJU Automatisierungstechnik GmbH || <a href="https://www.ljuonline.de">www.ljuonline.de</a> <span
                    class="hint">(external link)</span> </p>
        -->
    </footer>
</body>

</html>